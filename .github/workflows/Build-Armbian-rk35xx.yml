name: "Build-Armbian"
on:
  workflow_dispatch:
    inputs:
    
      BOARD:
        type: choice
        description: 'Board'
        options:
        - zw-21
        - radxa-cubie-a5e

      BRANCH:
        type: choice
        description: 'Kernel branch'
        options:
        - edge
        - vendor
        - dev
        default: 'dev'

      DESKTOP:
        type: choice
        description: 'DESKTOP'
        options:
        - minimal
        - server
        default: 'server'

      EXTE_extensions:
        type: choice
        description: "Armbian lists of extensions"
        options:
        - 
        - mesa-vpu
        default: " "

      DOCKER:
        type: choice
        description: 'PREFER DOCKER'
        options:
        - ubuntu:jammy
        - ubuntu:noble
        - debian:bookworm
        - ubuntu-latest
        default: 'debian:bookworm'
      
      ROOTFS:
        type: choice
        description: 'ROOTFS TYPE'
        options:
        - ext4
        - btrfs
        default: 'ext4'
        
      nightlybuild:
        description: 'yes = nighlty, no = stable'
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'yes'
        
env:
  TZ: Asia/Shanghai

jobs:
  Armbian:  
    runs-on: ubuntu-latest  
    strategy:
      matrix:
        RELEASE: [jammy, noble, bookworm, sid]
    steps:
      - name: "Checkout customisations"
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          clean: false
          path: custom
          
      - name: "Checkout Armbian build"
        uses: actions/checkout@main
        with:
          repository: armbian/build
          clean: false
          ref: main
          path: build
          
      - name: "Checkout Armbian os"
        uses: actions/checkout@main
        with:
          repository: armbian/os
          fetch-depth: 0
          clean: false
          path: os
    
      - name: Set Env
        shell: bash
        run: |
          #sudo apt update -y
          #sudo apt-get full-upgrade -y
          #sudo apt-get install -y software-properties-common
          
          # userspace decode
          if [[ "${{ inputs.DESKTOP }}" == "minimal" ]]; then
            echo "BUILD_DESKTOP="no"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="yes"" >> $GITHUB_ENV
          elif [[ "${{ inputs.DESKTOP }}" == "server" ]]; then
            echo "BUILD_DESKTOP="no"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="no"" >> $GITHUB_ENV
          else
            echo "BUILD_DESKTOP="yes"" >> $GITHUB_ENV
            echo "BUILD_MINIMAL="no"" >> $GITHUB_ENV
            echo "DESKTOP_ENVIRONMENT="${{ inputs.DESKTOP }}"" >> $GITHUB_ENV
            echo "DESKTOP_APPGROUPS_SELECTED="browsers"" >> $GITHUB_ENV
            echo "DESKTOP_ENVIRONMENT_CONFIG_NAME="config_base"" >> $GITHUB_ENV
          fi
          
          # userspace decode DOCKER
          if [[ "${{ inputs.DOCKER }}" == "ubuntu-latest" ]]; then
            echo "PREFER_DOCKER="no"" >> $GITHUB_ENV
          else
            echo "PREFER_DOCKER="yes"" >> $GITHUB_ENV
            echo "DOCKER_ARMBIAN_BASE_IMAGE="${{ inputs.DOCKER }}"" >> $GITHUB_ENV
          fi

          # file = where version is getting stored, different for stable and nightly
          # skip_tag = we only upload nighlty to GH releases
          echo "file=nightly" >> $GITHUB_OUTPUT
          echo "skip_tag=false" >> $GITHUB_OUTPUT
          echo "pre_release=true" >> $GITHUB_OUTPUT
          if [ "${{ github.event.inputs.nightlybuild || 'no' }}" == "no" ]; then
              echo "file=stable" >> $GITHUB_OUTPUT
              echo "skip_tag=true" >> $GITHUB_OUTPUT
              echo "pre_release=false" >> $GITHUB_OUTPUT
          fi
          
          # read version from upstream Armbian OS
          echo "CURRENT_YEAR_MONTH=$(date +'%Y%m')" >> $GITHUB_ENV
          echo "VERSIONOS=$(cat build/VERSION)" >> $GITHUB_ENV
          
          # read VERSION_OVERRIDE from upstream Armbian OS
          cat "os/nightly.json" | jq '.version' | sed "s/\"//g" | sed 's/^/ARMBIAN_VERSION=/' >> $GITHUB_ENV
          #cat os/stable.json | jq '.version' | sed "s/\"//g" | sed 's/^/ARMBIAN_VERSION=/' >> $GITHUB_ENV
          [[ "${{ inputs.armbian_version }}" != '' ]] && echo "ARMBIAN_VERSION=${{ inputs.armbian_version }}" >> $GITHUB_ENV
         
          # copy os userpatches
          mkdir -p  ./build/userpatches
          cp -rf ./custom/config/* ./build/config
          cp -rf ./custom/userpatches/* ./build/userpatches
          cp -rf ./os/userpatches/* ./build/userpatches
          
      - name: Compile Armbian [ ${{ inputs.BOARD }} ${{ inputs.RELEASE }} ${{ inputs.DESKTOP }} ]
        shell: bash
        run: |
          # go to build folder
          cd ./build
          # execute build command
          ./compile.sh \
          REVISION="${{ env.ARMBIAN_VERSION }}" \
          BOARD="${{ inputs.BOARD }}" \
          BRANCH="${{ inputs.BRANCH }}" \
          RELEASE="${{ matrix.RELEASE }}" \
          KERNEL_CONFIGURE="no" \
          BUILD_DESKTOP="${{ env.BUILD_DESKTOP }}" \
          BUILD_MINIMAL="${{ env.BUILD_MINIMAL }}" \
          DESKTOP_ENVIRONMENT="${{ env.DESKTOP_ENVIRONMENT }}" \
          DESKTOP_APPGROUPS_SELECTED="${{ env.DESKTOP_APPGROUPS_SELECTED }}" \
          DESKTOP_ENVIRONMENT_CONFIG_NAME="${{ env.DESKTOP_ENVIRONMENT_CONFIG_NAME }}" \
          ENABLE_EXTENSIONS="${{ inputs.EXTENSIONSs || ' '  }}" \
          BOARD_FIRMWARE_INSTALL="-full" \
          SHARE_LOG="yes" \
          BETA="${{ inputs.nightlybuild }}" \
          PREFER_DOCKER="${{ env.PREFER_DOCKER}}" \
          DOCKER_ARMBIAN_BASE_IMAGE="${{ env.DOCKER_ARMBIAN_BASE_IMAGE }}" \
          ROOTFS_TYPE="${{ inputs.ROOTFS}}" \
          EXPERT="yes" \
          VENDOR=Armbian \
          IMAGE_XZ_COMPRESSION_RATIO=5 \
          COMPRESS_OUTPUTIMAGE=sha,gpg,xz
      - name: "Generate body file"
        if: success()
        run: |
            echo "
              <p align='center'>
              <a href='https://www.armbian.com'>
              <img src='https://raw.githubusercontent.com/armbian/.github/master/profile/tux-two.png' width='400'></a></p>
              <h1 align=center>Armbian OS</h1>
              <p align=center>
              <a href='https://www.armbian.com'><img alt='Armbian Linux stable' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20current&query=CURRENT&color=f71000&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'></a>
              <a href='https://www.armbian.com'><img alt='Armbian Linux rolling' src='https://img.shields.io/badge/dynamic/json?label=Armbian%20Linux%20edge&query=EDGE&color=34be5b&cacheSeconds=600&style=for-the-badge&url=https%3A%2F%2Fgithub.com%2Farmbian%2Fscripts%2Freleases%2Fdownload%2Fstatus%2Frunners_capacity.json'></a>
              </p>
              <br>

              - Board: ${{ inputs.BOARD }} 
              - Version: V${{ env.ARMBIAN_VERSION }} 
              - Verification: sha256sum 

              Please note that Armbian Rolling Releases are not recommended for production environments, as these builds are not thoroughly tested. However, in most cases, they should work well. 

              <br>
              &nbsp;
              </p>" > body.html
      - name: Upload Armbian to Release 
        uses: ncipollo/release-action@main
        if: success()
        with:
          tag: "Armbian_V${{ env.ARMBIAN_VERSION }}"
          name: "Armbian_V${{ env.ARMBIAN_VERSION }}"
          artifacts: "build/output/images/*"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: "body.html"
